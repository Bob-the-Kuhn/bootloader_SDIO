# 2017, Aurelio Colosimo, <aurelio@aureliocolosimo.it>
# MIT License

BIGOBJ = firmware.o
LIB = firmware.a
ELF = firmware.elf
BIN = firmware.bin

# Cross compiling configuration
CROSS_COMPILE = arm-none-eabi-
CC			  = $(CROSS_COMPILE)gcc
AR			  = $(CROSS_COMPILE)ar
LD			  = $(CROSS_COMPILE)ld
OBJCOPY		 = $(CROSS_COMPILE)objcopy
STRIP		   = $(CROSS_COMPILE)strip

CFLAGS += -mthumb -Wall -Werror -O0 -mcpu=cortex-m3 -mfpu=fpv4-sp-d16 \
	-mfloat-abi=hard -ggdb -g3


INCFLAGS +=	 -Isrc/Core
INCFLAGS +=	 -Isrc/Core/Inc
INCFLAGS +=	 -Isrc/Core/Src
INCFLAGS +=	 -Isrc/Core/Startup
INCFLAGS +=	 -Isrc/Drivers
INCFLAGS +=	 -Isrc/Drivers/CMSIS
INCFLAGS +=	 -Isrc/Drivers/CMSIS/Device
INCFLAGS +=	 -Isrc/Drivers/CMSIS/Device/ST
INCFLAGS +=	 -Isrc/Drivers/CMSIS/Device/ST/STM32F1xx
INCFLAGS +=	 -Isrc/Drivers/CMSIS/Device/ST/STM32F1xx/Include
INCFLAGS +=	 -Isrc/Drivers/CMSIS/Device/ST/STM32F1xx/Source
INCFLAGS +=	 -Isrc/Drivers/CMSIS/Include
INCFLAGS +=	 -Isrc/Drivers/STM32F1xx_HAL_Driver
INCFLAGS +=	 -Isrc/Drivers/STM32F1xx_HAL_Driver/Inc
INCFLAGS +=	 -Isrc/Drivers/STM32F1xx_HAL_Driver/Inc/Legacy
INCFLAGS +=	 -Isrc/Drivers/STM32F1xx_HAL_Driver/Src
INCFLAGS +=	 -Isrc/FATFS
INCFLAGS +=	 -Isrc/FATFS/App
INCFLAGS +=	 -Isrc/FATFS/Target
INCFLAGS +=	 -Isrc/Middlewares
INCFLAGS +=	 -Isrc/Middlewares/Third_Party
INCFLAGS +=	 -Isrc/Middlewares/Third_Party/FatFs
INCFLAGS +=	 -Isrc/Middlewares/Third_Party/FatFs/src
INCFLAGS +=	 -Isrc/Middlewares/Third_Party/FatFs/src/option
INCFLAGS +=	 -Isrc/stm32-bootloader
	
#OBJS += source/ff.o
#OBJS += source/ffunicode.o
#OBJS += source/ffsystem.o
#OBJS += source/diskio_stm32f4xx.o
#
#DEMO_OBJS += kim/init.o
#DEMO_OBJS += kim/kprint.o
#
#DEMO_OBJS += main.o

#############################
# no input files
#all: $(BIN)
#
#%.o: %.c
#	$(CC) -c $(CFLAGS) $(INCFLAGS) -o $@ $<
#
#$(BIGOBJ): $(OBJS)
#	$(LD) $(OBJS) -r -o $(BIGOBJ)
#
#$(LIB): $(BIGOBJ)
#	$(AR) rs $(LIB) $(BIGOBJ)
#
#$(ELF): $(LIB) $(DEMO_OBJS)
#	$(LD) $(DEMO_OBJS) $(LIB) -Tkim/stm32f4xx.ld -o $(ELF)
#
#$(BIN): $(ELF)
#	$(OBJCOPY) -O binary $(ELF) $(BIN)

#############################
# no input files
#SRC	 := ./src
#SRCS	:= $(wildcard $(SRC)/*.c)
#OBJS	:= $(patsubst $(SRC)/%.c,$(OBJ)/%.o,$(SRCS)) 
#
#%.o: %.c
#	$(CC) -c $(CFLAGS) $(INCFLAGS) -o $@ $<
# 
#$(OBJ)/%.o: $(SRC)/%.c | $(OBJ)
##	$(CC) -c $(CFLAGS) $(INCFLAGS) -o $@ $<
#	$(CC) $(CFLAGS) $(INCFLAGS) -c $< -o $@
#   
#$(ELF): $(OBJ)
#	$(LD) $(OBJ) -TSTM32F103ZETX_FLASH.ld -o $(ELF)   

#############################
#'test' is up to date
#SRC=$(wildcard *.c)
#
#test: $(SRC)
#	gcc -o $@ $^ $(CFLAGS) $(LIBS)

#############################
#  no input files
#SRC := src
#OBJ := obj
#
#SOURCES := $(wildcard $(SRC)/*.c)
#OBJECTS := $(patsubst $(SRC)/%.c, $(OBJ)/%.o, $(SOURCES))
#
#all: $(OBJECTS)
#	$(CC) $^ -o $@
#
#$(OBJ)/%.o: $(SRC)/%.c
#	$(CC) -I$(SRC) -c $< -o $@

#############################
# missing separator somewhere.
#SRC := src
#OBJ := obj
#
#SOURCES := $(wildcard $(SRC)/*.c)
#OBJECTS := $(patsubst $(SRC)/%.c, $(OBJ)/%.o, $(SOURCES))
#
#all: $(OBJECTS)
#	$(CC) $^ -o $@   
#
#$(OBJ)/%.o: $(SRC)/%.c
#	$(CC) -I$(SRC) -c $< -o $@

#############################
# No rule to make target 'obj', needed by 'firmware.elf'.
# doesn't make object files
#CC	  := gcc
#BIN	 := ./bin
#OBJ	 := ./obj
#INCLUDE := ./include
#SRC	 := ./src
#SRCS	:= $(wildcard $(SRC)/*.c)
#OBJS	:= $(patsubst $(SRC)/%.c,$(OBJ)/%.o,$(SRCS))
##EXE	 := $(BIN)/main.exe
##CFLAGS  := -I$(INCLUDE)
#LDLIBS  := -lm
#
##.PHONY: all run clean
##
##all: $(EXE)
#
##$(EXE): $(OBJS)
##	$(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS)
#
#$(OBJ)/%.o: $(SRC)/%.c | $(OBJ)
#	$(CC) $(CFLAGS) -c $< -o $@
#  
#$(ELF): $(OBJS) 
#	$(LD) $(OBJS) -TSTM32F103ZETX_FLASH.ld -o $(ELF)
##
##$(BIN): $(ELF)
##	$(OBJCOPY) -O binary $(ELF) $(BIN)

#############################
#no input files
#SRC := src
#OBJ := obj
#
#SOURCES := $(wildcard $(SRC)/*.c)
#OBJECTS := $(patsubst $(SRC)/%.c, $(OBJ)/%.o, $(SOURCES))
#
#all: $(OBJECTS)
#	$(CC) $^ -o $@
#
#$(OBJ)/%.o: $(SRC)/%.c
#	$(CC) -I$(SRC) -c $< -o $@
	
#############################
# Linking objects...  fatal error: no input files
#PROJ_NAME=mono
#
#C_FILES=$(shell find . -name "*.c")
#
#S_OBJ=$(patsubst %.c, %.o, $(C_FILES))
#
#CXXFLAGS=-c \
#		 -g \
#		-Wall
#
#all: $(PROJ_NAME)
#	@echo Running application
#	@echo
#	@./$(PROJ_NAME)
#
#$(PROJ_NAME): $(S_OBJ)
#	@echo Linking objects...
#	@g++ -o $@ $^
#
#%.o: %.c %.h
#	@echo Compiling and generating object 1 $@ ...
#	@g++ $< $(CXXFLAGS) -o $@
#
#main.o: main.c
#	@echo Compiling and generating object 2 $@ ...
#	@g++ $< $(CXXFLAGS)
	
#############################
# No targets.
#TARGET = kmusb
#
#CC = gcc
#CFLAGS = -g
#
#OUTDIR = ./bin
#DATADIR = ./data
#SUBDIR = semihost stream arg_parser
#DIR_OBJ = ./obj
#
#INCS = $(wildcard *.h $(foreach fd, $(SUBDIR), $(fd)/*.h))
#SRCS = $(wildcard *.c $(foreach fd, $(SUBDIR), $(fd)/*.c))
#NODIR_SRC = $(notdir $(SRCS))
#OBJS = $(addprefix $(DIR_OBJ)/, $(SRCS:c=o)) # obj/xxx.o obj/folder/xxx .o
#INC_DIRS = -I./ $(addprefix -I, $(SUBDIR))
##LIBS = -largp
##LIB_DIRS = -L/usr/local/Cellar/argp-standalone/1.3/lib
#
##PHONY := $(TARGET)
##$(TARGET): $(OBJS)
##	$(CC) -o $(OUTDIR)/$@ $(OBJS)
#
#$(DIR_OBJ)/%.o: %.c $(INCS)
#	mkdir -p $(@D)
#	$(CC) -o $@ $(CFLAGS) -c $< $(INC_DIRS)
#
#PHONY += clean
#clean:
#	rm -rf $(OUTDIR)/* $(DATADIR)/* $(DIR_OBJ)/*
#
#PHONY += echoes
#echoes:
#	@echo "INC files: $(INCS)"
#	@echo "SRC files: $(SRCS)"
#	@echo "OBJ files: $(OBJS)"
#	@echo "INC DIR: $(INC_DIRS)"
#
#.PHONY = $(PHONY)

#############################

CC=g++
TARGET=firmware

SOURCE = src/Core/Startup/startup_stm32f103zetx.s
SOURCE = src/Core/Src/main.c
SOURCE = src/Core/Src/stm32f1xx_hal_msp.c
SOURCE = src/Core/Src/stm32f1xx_it.c
SOURCE = src/Core/Src/syscalls.c
SOURCE = src/Core/Src/sysmem.c
SOURCE = src/Core/Src/system_stm32f1xx.c
SOURCE = src/FATFS/App/fatfs.c
SOURCE = src/FATFS/Target/bsp_driver_sd.c
SOURCE = src/Middlewares/Third_Party/FatFs/src/diskio.c
SOURCE = src/Middlewares/Third_Party/FatFs/src/drivers/sd_diskio.c
SOURCE = src/Middlewares/Third_Party/FatFs/src/ff.c
SOURCE = src/Middlewares/Third_Party/FatFs/src/ff_gen_drv.c
SOURCE = src/Middlewares/Third_Party/FatFs/src/option/syscall.c
SOURCE = src/stm32-bootloader/bootloader.c

## End sources definition
INCLUDE = -I.src/Core/Inc/main.h
INCLUDE = -I.src/Core/Inc/stm32f1xx_hal_conf.h
INCLUDE = -I.src/Core/Inc/stm32f1xx_it.h
INCLUDE = -I.src/FATFS/App/fatfs.h
INCLUDE = -I.src/FATFS/Target/bsp_driver_sd.h
INCLUDE = -I.src/FATFS/Target/ffconf.h
INCLUDE = -I.src/Middlewares/Third_Party/FatFs/src/diskio.h
INCLUDE = -I.src/Middlewares/Third_Party/FatFs/src/drivers/sd_diskio.h
INCLUDE = -I.src/Middlewares/Third_Party/FatFs/src/ff.h
INCLUDE = -I.src/Middlewares/Third_Party/FatFs/src/ff_gen_drv.h
INCLUDE = -I.src/Middlewares/Third_Party/FatFs/src/integer.h
INCLUDE = -I.src/stm32-bootloader/bootloader.h
## end more includes

VPATH=$(OTHERDIR)
OBJ=$(join $(addsuffix ../obj/, $(dir $(SOURCE))), $(notdir $(SOURCE:.c=.o))) 

## Fix dependency destination to be ../.dep relative to the src dir
DEPENDS=$(join $(addsuffix ../.dep/, $(dir $(SOURCE))), $(notdir $(SOURCE:.c=.d)))

## Default rule executed
all: $(TARGET)
		@true

## Clean Rule
clean:
		@-rm -f $(TARGET) $(OBJ) $(DEPENDS)


## Rule for making the actual target
$(TARGET): $(OBJ)
		@echo "============="
		@echo "Linking the target $@"
		@echo "============="
		@$(CC) $(CFLAGS) -o $@ $^ $(LIBS)
		@echo -- Link finished --

## Generic compilation rule
%.o : %.c
		@mkdir -p $(dir $@)
		@echo "============="
		@echo "Compiling $<"
		@$(CC) $(CFLAGS) -c $< -o $@


## Rules for object files from c files
## Object file for each file is put in obj directory
## one level up from the actual source directory.
../obj/%.o : %.c
		@mkdir -p $(dir $@)
		@echo "============="
		@echo "Compiling $<"
		@$(CC) $(CFLAGS) -c $< -o $@

# Rule for "other directory"  You will need one per "other" dir
$(OTHERDIR)/../obj/%.o : %.c
		@mkdir -p $(dir $@)
		@echo "============="
		@echo "Compiling $<"
		@$(CC) $(CFLAGS) -c $< -o $@

## Make dependancy rules
../.dep/%.d: %.c
		@mkdir -p $(dir $@)
		@echo "============="
		@echo Building dependencies file for $*.o
		@$(SHELL) -ec '$(CC) -M $(CFLAGS) $< | sed "s^$*.o^../obj/$*.o^" > $@'

## Dependency rule for "other" directory
$(OTHERDIR)/../.dep/%.d: %.c
		@mkdir -p $(dir $@)
		@echo "============="
		@echo Building dependencies file for $*.o
		@$(SHELL) -ec '$(CC) -M $(CFLAGS) $< | sed "s^$*.o^$(OTHERDIR)/../obj/$*.o^" > $@'

## Include the dependency files
-include $(DEPENDS)

#############################

#clean:
#	rm -f $(OBJS) $(DEMO_OBJS) $(BIGOBJ) $(LIB) $(ELF) $(BIN)
#
#flash: $(BIN)
#	st-flash write $(BIN) 0x8000000
#
#.PHONY: clean
